# -*- coding: utf-8 -*-
"""ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nti2rsOR6CGOrOHNpTtSo3dXIvZqxPjl
"""

import json
from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments, DataCollatorForLanguageModeling
import torch
from datasets import Dataset

# Load and preprocess the dataset
with open('dataset.json', 'r') as file:
    dataset = json.load(file)

# Extract questions and answers
questions = [item['prompt'] for item in dataset]
answers = [item['completion'] for item in dataset]

# Prepare training data
train_texts = [f"Question: {q}\nAnswer: {a}" for q, a in zip(questions, answers)]
train_dataset = Dataset.from_dict({"text": train_texts})

# Initialize the model and tokenizer
model_name = "EleutherAI/gpt-neo-125M"
tokenizer = AutoTokenizer.from_pretrained(model_name)
tokenizer.pad_token = tokenizer.eos_token
model = AutoModelForCausalLM.from_pretrained(model_name)

# Tokenize the dataset directly

tokenized_inputs = tokenizer(
    train_texts,
    padding='max_length',
    truncation=True,
    max_length=100,
    return_tensors='pt'
)

# Create a Dataset from tokenized inputs
tokenized_dataset = Dataset.from_dict({
    'input_ids': tokenized_inputs['input_ids'],
    'attention_mask': tokenized_inputs['attention_mask']
})

# Data collator to handle padding
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=2,
    save_steps=10_000,
    save_total_limit=2,
    logging_dir='./logs',
    logging_steps=500,
    load_best_model_at_end=True,
    evaluation_strategy="steps",  # Evaluate and save best model
    save_strategy="steps",
    eval_steps=500,
)

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset,
    data_collator=data_collator,
    tokenizer=tokenizer,
)

# Train the model
trainer.train()

# Save the fine-tuned model
model.save_pretrained("./fine_tuned_model")
tokenizer.save_pretrained("./fine_tuned_tokenizer")

# Load the fine-tuned model and tokenizer
model = AutoModelForCausalLM.from_pretrained('./fine_tuned_model')
tokenizer = AutoTokenizer.from_pretrained('./fine_tuned_tokenizer')
